import {
  useTheme
} from "./chunk-OWD3MFUX.js";
import {
  require_prop_types
} from "./chunk-7JVWXMC3.js";
import {
  require_jsx_runtime
} from "./chunk-5AS4NL4J.js";
import {
  require_react
} from "./chunk-RUPNRBO7.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@toolpad/core/AppProvider/LocalizationProvider.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@toolpad/core/locales/getLocalization.js
var getLocalization = (translations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: {
            ...translations
          }
        }
      }
    }
  };
};

// node_modules/@toolpad/core/locales/en.js
var en = {
  // Account
  accountSignInLabel: "Sign In",
  accountSignOutLabel: "Sign Out",
  // AccountPreview
  accountPreviewTitle: "Account",
  accountPreviewIconButtonLabel: "Current User",
  // SignInPage
  signInTitle: "Sign In",
  signInSubtitle: "Welcome user, please sign in to continue",
  signInRememberMe: "Remember Me",
  oauthSignInTitle: "Sign in with OAuth",
  passkeySignInTitle: "Sign in with Passkey",
  magicLinkSignInTitle: "Sign in with Magic Link",
  // Common authentication labels
  email: "Email",
  password: "Password",
  username: "Username",
  passkey: "Passkey",
  // Common action labels
  save: "Save",
  cancel: "Cancel",
  ok: "Ok",
  or: "Or",
  to: "To",
  with: "With",
  close: "Close",
  delete: "Delete",
  alert: "Alert",
  confirm: "Confirm",
  loading: "Loading...",
  // CRUD
  createNewButtonLabel: "Create new",
  reloadButtonLabel: "Reload data",
  createLabel: "Create",
  createSuccessMessage: "Item created successfully.",
  createErrorMessage: "Failed to create item. Reason:",
  editLabel: "Edit",
  editSuccessMessage: "Item edited successfully.",
  editErrorMessage: "Failed to edit item. Reason:",
  deleteLabel: "Delete",
  deleteConfirmTitle: "Delete item?",
  deleteConfirmMessage: "Do you wish to delete this item?",
  deleteConfirmLabel: "Delete",
  deleteCancelLabel: "Cancel",
  deleteSuccessMessage: "Item deleted successfully.",
  deleteErrorMessage: "Failed to delete item. Reason:",
  deletedItemMessage: "This item has been deleted."
};
var en_default = getLocalization(en);

// node_modules/@toolpad/core/AppProvider/LocalizationProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var LocalizationContext = React.createContext({});
var LocalizationProvider = function LocalizationProvider2(props) {
  var _a, _b, _c;
  const {
    localeText: propsLocaleText,
    children
  } = props;
  const theme = useTheme();
  const themeLocaleText = (_c = (_b = (_a = theme == null ? void 0 : theme.components) == null ? void 0 : _a.MuiLocalizationProvider) == null ? void 0 : _b.defaultProps) == null ? void 0 : _c.localeText;
  const defaultLocaleText = en_default.components.MuiLocalizationProvider.defaultProps.localeText;
  const localeText = React.useMemo(() => ({
    ...defaultLocaleText,
    ...themeLocaleText,
    ...propsLocaleText
  }), [defaultLocaleText, themeLocaleText, propsLocaleText]);
  return (0, import_jsx_runtime.jsx)(LocalizationContext.Provider, {
    value: localeText,
    children
  });
};
true ? LocalizationProvider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * Locale for components texts
   */
  localeText: import_prop_types.default.object
} : void 0;
function useLocaleText() {
  return React.useContext(LocalizationContext);
}

// node_modules/@toolpad/core/shared/context.js
var React2 = __toESM(require_react());
var BrandingContext = React2.createContext(null);
var NavigationContext = React2.createContext([]);
var PaletteModeContext = React2.createContext({
  paletteMode: "light",
  setPaletteMode: () => {
  },
  isDualTheme: false
});
var RouterContext = React2.createContext(null);
var WindowContext = React2.createContext(void 0);
var CrudContext = React2.createContext({
  dataSource: null,
  dataSourceCache: null
});

export {
  BrandingContext,
  NavigationContext,
  PaletteModeContext,
  RouterContext,
  WindowContext,
  LocalizationContext,
  LocalizationProvider,
  useLocaleText
};
//# sourceMappingURL=chunk-Z7GN3LZG.js.map
