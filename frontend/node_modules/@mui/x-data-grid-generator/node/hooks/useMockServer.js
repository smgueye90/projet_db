"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMockServer = exports.BASE_URL = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _lruCache = require("lru-cache");
var _xDataGridPro = require("@mui/x-data-grid-pro");
var _useDemoData = require("./useDemoData");
var _commodities = require("../columns/commodities.columns");
var _employees = require("../columns/employees.columns");
var _realDataService = require("../services/real-data-service");
var _treeDataGenerator = require("../services/tree-data-generator");
var _serverUtils = require("./serverUtils");
var _services = require("../services");
var _useMovieData = require("./useMovieData");
const dataCache = new _lruCache.LRUCache({
  max: 10,
  ttl: 60 * 5 * 1e3 // 5 minutes
});
const BASE_URL = exports.BASE_URL = 'https://mui.com/x/api/data-grid';
const GET_DEFAULT_DATASET_OPTIONS = isRowGrouping => ({
  dataSet: isRowGrouping ? 'Movies' : 'Commodity',
  rowLength: isRowGrouping ? (0, _useMovieData.getMovieRows)().length : 100,
  maxColumns: 6
});
const getColumnsFromOptions = options => {
  let columns;
  switch (options.dataSet) {
    case 'Commodity':
      columns = (0, _commodities.getCommodityColumns)(options.editable);
      break;
    case 'Employee':
      columns = (0, _employees.getEmployeeColumns)();
      break;
    case 'Movies':
      columns = (0, _useMovieData.getMovieColumns)();
      break;
    default:
      throw new Error('Unknown dataset');
  }
  if (options.visibleFields) {
    columns = columns.map(col => options.visibleFields?.includes(col.field) ? col : (0, _extends2.default)({}, col, {
      hide: true
    }));
  }
  if (options.maxColumns) {
    columns = columns.slice(0, options.maxColumns);
  }
  return columns;
};
function decodeParams(url) {
  const params = new URL(url).searchParams;
  const decodedParams = {};
  const array = Array.from(params.entries());
  for (const [key, value] of array) {
    try {
      decodedParams[key] = JSON.parse(value);
    } catch {
      decodedParams[key] = value;
    }
  }
  return decodedParams;
}
const getInitialState = (columns, groupingField) => {
  const columnVisibilityModel = {};
  columns.forEach(col => {
    if (col.hide) {
      columnVisibilityModel[col.field] = false;
    }
  });
  if (groupingField) {
    columnVisibilityModel[groupingField] = false;
  }
  return {
    columns: {
      columnVisibilityModel
    }
  };
};
const defaultColDef = (0, _xDataGridPro.getGridDefaultColumnTypes)();
function sendEmptyResponse() {
  return new Promise(resolve => {
    resolve({
      rows: [],
      rowCount: 0
    });
  });
}
const useMockServer = (dataSetOptions, serverOptions, shouldRequestsFail) => {
  const [data, setData] = React.useState();
  const [index, setIndex] = React.useState(0);
  const shouldRequestsFailRef = React.useRef(shouldRequestsFail ?? false);
  React.useEffect(() => {
    if (shouldRequestsFail !== undefined) {
      shouldRequestsFailRef.current = shouldRequestsFail;
    }
  }, [shouldRequestsFail]);
  const isRowGrouping = dataSetOptions?.rowGrouping ?? false;
  const options = (0, _extends2.default)({}, GET_DEFAULT_DATASET_OPTIONS(isRowGrouping), dataSetOptions);
  const isTreeData = options.treeData?.groupingField != null;
  const columns = React.useMemo(() => {
    return getColumnsFromOptions({
      dataSet: options.dataSet,
      editable: options.editable,
      maxColumns: options.maxColumns,
      visibleFields: options.visibleFields
    });
  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);
  const initialState = React.useMemo(() => getInitialState(columns, options.treeData?.groupingField), [columns, options.treeData?.groupingField]);
  const columnsWithDefaultColDef = React.useMemo(() => columns.map(column => (0, _extends2.default)({}, defaultColDef[column.type || 'string'], column)), [columns]);
  const getGroupKey = React.useMemo(() => {
    if (isTreeData) {
      return row => row[options.treeData.groupingField];
    }
    return undefined;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [options.treeData?.groupingField, isTreeData]);
  const getChildrenCount = React.useMemo(() => {
    if (isTreeData) {
      return row => row.descendantCount;
    }
    return undefined;
  }, [isTreeData]);
  React.useEffect(() => {
    const cacheKey = `${options.dataSet}-${options.rowLength}-${index}-${options.maxColumns}`;

    // Cache to allow fast switch between the JavaScript and TypeScript version
    // of the demos.
    if (dataCache.has(cacheKey)) {
      const newData = dataCache.get(cacheKey);
      setData(newData);
      return undefined;
    }
    if (options.dataSet === 'Movies') {
      const rowsData = {
        rows: (0, _useMovieData.getMovieRows)(),
        columns
      };
      setData(rowsData);
      dataCache.set(cacheKey, rowsData);
      return undefined;
    }
    let active = true;
    (async () => {
      let rowData;
      const rowLength = options.rowLength;
      if (rowLength > 1000) {
        rowData = await (0, _realDataService.getRealGridData)(1000, columns);
        rowData = await (0, _useDemoData.extrapolateSeed)(rowLength, rowData);
      } else {
        rowData = await (0, _realDataService.getRealGridData)(rowLength, columns);
      }
      if (!active) {
        return;
      }
      if (isTreeData) {
        rowData = (0, _treeDataGenerator.addTreeDataOptionsToDemoData)(rowData, {
          maxDepth: options.treeData?.maxDepth,
          groupingField: options.treeData?.groupingField,
          averageChildren: options.treeData?.averageChildren
        });
      }
      if (process.env.NODE_ENV !== 'production') {
        (0, _useDemoData.deepFreeze)(rowData);
      }
      dataCache.set(cacheKey, rowData);
      setData(rowData);
    })();
    return () => {
      active = false;
    };
  }, [columns, isTreeData, options.rowLength, options.treeData?.maxDepth, options.treeData?.groupingField, options.treeData?.averageChildren, options.dataSet, options.maxColumns, index]);
  const fetchRows = React.useCallback(async requestUrl => {
    if (!requestUrl || !data?.rows) {
      return sendEmptyResponse();
    }
    const params = decodeParams(requestUrl);
    const verbose = serverOptions?.verbose ?? true;
    // eslint-disable-next-line no-console
    const print = console.info;
    if (verbose) {
      print('MUI X: DATASOURCE REQUEST', params);
    }
    let getRowsResponse;
    const serverOptionsWithDefault = {
      minDelay: serverOptions?.minDelay ?? _serverUtils.DEFAULT_SERVER_OPTIONS.minDelay,
      maxDelay: serverOptions?.maxDelay ?? _serverUtils.DEFAULT_SERVER_OPTIONS.maxDelay,
      useCursorPagination: serverOptions?.useCursorPagination ?? _serverUtils.DEFAULT_SERVER_OPTIONS.useCursorPagination
    };
    if (shouldRequestsFailRef.current) {
      const {
        minDelay,
        maxDelay
      } = serverOptionsWithDefault;
      const delay = (0, _services.randomInt)(minDelay, maxDelay);
      return new Promise((_, reject) => {
        if (verbose) {
          print('MUI X: DATASOURCE REQUEST FAILURE', params);
        }
        setTimeout(() => reject(new Error('Could not fetch the data')), delay);
      });
    }
    if (isTreeData) {
      const {
        rows,
        rootRowCount
      } = await (0, _serverUtils.processTreeDataRows)(data?.rows ?? [], params, serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: rows.slice().map(row => (0, _extends2.default)({}, row, {
          path: undefined
        })),
        rowCount: rootRowCount
      };
    } else if (isRowGrouping) {
      const {
        rows,
        rootRowCount
      } = await (0, _serverUtils.processRowGroupingRows)(data?.rows ?? [], params, serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: rows.slice().map(row => (0, _extends2.default)({}, row, {
          path: undefined
        })),
        rowCount: rootRowCount
      };
    } else {
      const {
        returnedRows,
        nextCursor,
        totalRowCount
      } = await (0, _serverUtils.loadServerRows)(data?.rows ?? [], (0, _extends2.default)({}, params, params.paginationModel), serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: returnedRows,
        rowCount: totalRowCount,
        pageInfo: {
          nextCursor
        }
      };
    }
    return new Promise(resolve => {
      if (verbose) {
        print('MUI X: DATASOURCE RESPONSE', params, getRowsResponse);
      }
      resolve(getRowsResponse);
    });
  }, [data, serverOptions?.verbose, serverOptions?.minDelay, serverOptions?.maxDelay, serverOptions?.useCursorPagination, isTreeData, columnsWithDefaultColDef, isRowGrouping]);
  return {
    columns: columnsWithDefaultColDef,
    initialState: options.dataSet === 'Movies' ? {} : initialState,
    getGroupKey,
    getChildrenCount,
    fetchRows,
    loadNewData: () => {
      setIndex(oldIndex => oldIndex + 1);
    },
    isReady: Boolean(data?.rows?.length)
  };
};
exports.useMockServer = useMockServer;