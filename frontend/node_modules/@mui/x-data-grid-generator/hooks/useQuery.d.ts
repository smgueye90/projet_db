import * as React from 'react';
import { GridRowModel } from '@mui/x-data-grid-pro';
import { UseDemoDataOptions } from './useDemoData';
import type { ServerOptions, QueryOptions, PageInfo } from './serverUtils';
export declare const createFakeServer: (dataSetOptions?: Partial<UseDemoDataOptions>, serverOptions?: ServerOptions) => {
    columns: import("..").GridColDefGenerator[];
    columnsWithDefaultColDef: ({
        field: string;
        headerName?: string;
        description?: string;
        width?: number;
        flex?: number;
        minWidth?: number;
        maxWidth?: number;
        hideable?: boolean;
        sortable?: boolean;
        sortingOrder?: readonly import("@mui/x-data-grid").GridSortDirection[];
        resizable?: boolean;
        editable?: boolean;
        groupable?: boolean;
        pinnable?: boolean;
        sortComparator?: import("@mui/x-data-grid").GridComparatorFn<any> | undefined;
        getSortComparator?: ((sortDirection: import("@mui/x-data-grid").GridSortDirection) => import("@mui/x-data-grid").GridComparatorFn<any> | undefined) | undefined;
        type?: import("@mui/x-data-grid").GridColType;
        align?: import("@mui/x-data-grid").GridAlignment;
        valueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        rowSpanValueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        valueSetter?: import("@mui/x-data-grid").GridValueSetter<any, any, any> | undefined;
        valueFormatter?: import("@mui/x-data-grid").GridValueFormatter<any, any, any, never> | undefined;
        valueParser?: import("@mui/x-data-grid").GridValueParser<any, any, any> | undefined;
        cellClassName?: import("@mui/x-data-grid").GridCellClassNamePropType<any, any> | undefined;
        display?: "text" | "flex";
        renderCell?: ((params: import("@mui/x-data-grid").GridRenderCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        renderEditCell?: ((params: import("@mui/x-data-grid").GridRenderEditCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        preProcessEditCellProps?: ((params: import("@mui/x-data-grid").GridPreProcessEditCellProps) => import("@mui/x-data-grid").GridEditCellProps | Promise<import("@mui/x-data-grid").GridEditCellProps>) | undefined;
        headerClassName?: import("@mui/x-data-grid").GridColumnHeaderClassNamePropType;
        renderHeader?: ((params: import("@mui/x-data-grid").GridColumnHeaderParams<any, any, any>) => React.ReactNode) | undefined;
        headerAlign?: import("@mui/x-data-grid").GridAlignment;
        hideSortIcons?: boolean;
        disableColumnMenu?: boolean;
        filterable?: boolean;
        filterOperators?: readonly import("@mui/x-data-grid").GridFilterOperator<any, any, any>[] | undefined;
        getApplyQuickFilterFn?: import("@mui/x-data-grid").GetApplyQuickFilterFn<any, any> | undefined;
        disableReorder?: boolean;
        disableExport?: boolean;
        colSpan?: number | import("@mui/x-data-grid").GridColSpanFn<any, any, any> | undefined;
        renderHeaderFilter?: (params: import("@mui/x-data-grid-pro").GridRenderHeaderFilterProps) => React.ReactNode;
        aggregable?: boolean;
        availableAggregationFunctions?: string[];
        groupingValueGetter?: import("@mui/x-data-grid-premium").GridGroupingValueGetter<any> | undefined;
        pastedValueParser?: import("@mui/x-data-grid-premium").GridPastedValueParser<any, any, any> | undefined;
        generateData?: (row: any, context: import("..").GridDataGeneratorContext) => any;
        dataGeneratorUniquenessEnabled?: boolean;
        hide?: boolean;
    } | {
        type: "actions";
        getActions: (params: import("@mui/x-data-grid").GridRowParams<any>) => readonly React.ReactElement<import("@mui/x-data-grid").GridActionsCellItemProps>[];
        field: string;
        headerName?: string;
        description?: string;
        width?: number;
        flex?: number;
        minWidth?: number;
        maxWidth?: number;
        hideable?: boolean;
        sortable?: boolean;
        sortingOrder?: readonly import("@mui/x-data-grid").GridSortDirection[];
        resizable?: boolean;
        editable?: boolean;
        groupable?: boolean;
        pinnable?: boolean;
        sortComparator?: import("@mui/x-data-grid").GridComparatorFn<any> | undefined;
        getSortComparator?: ((sortDirection: import("@mui/x-data-grid").GridSortDirection) => import("@mui/x-data-grid").GridComparatorFn<any> | undefined) | undefined;
        align?: import("@mui/x-data-grid").GridAlignment;
        valueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        rowSpanValueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        valueSetter?: import("@mui/x-data-grid").GridValueSetter<any, any, any> | undefined;
        valueFormatter?: import("@mui/x-data-grid").GridValueFormatter<any, any, any, never> | undefined;
        valueParser?: import("@mui/x-data-grid").GridValueParser<any, any, any> | undefined;
        cellClassName?: import("@mui/x-data-grid").GridCellClassNamePropType<any, any> | undefined;
        display?: "text" | "flex";
        renderCell?: ((params: import("@mui/x-data-grid").GridRenderCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        renderEditCell?: ((params: import("@mui/x-data-grid").GridRenderEditCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        preProcessEditCellProps?: ((params: import("@mui/x-data-grid").GridPreProcessEditCellProps) => import("@mui/x-data-grid").GridEditCellProps | Promise<import("@mui/x-data-grid").GridEditCellProps>) | undefined;
        headerClassName?: import("@mui/x-data-grid").GridColumnHeaderClassNamePropType;
        renderHeader?: ((params: import("@mui/x-data-grid").GridColumnHeaderParams<any, any, any>) => React.ReactNode) | undefined;
        headerAlign?: import("@mui/x-data-grid").GridAlignment;
        hideSortIcons?: boolean;
        disableColumnMenu?: boolean;
        filterable?: boolean;
        filterOperators?: readonly import("@mui/x-data-grid").GridFilterOperator<any, any, any>[] | undefined;
        getApplyQuickFilterFn?: import("@mui/x-data-grid").GetApplyQuickFilterFn<any, any> | undefined;
        disableReorder?: boolean;
        disableExport?: boolean;
        colSpan?: number | import("@mui/x-data-grid").GridColSpanFn<any, any, any> | undefined;
        renderHeaderFilter?: (params: import("@mui/x-data-grid-pro").GridRenderHeaderFilterProps) => React.ReactNode;
        aggregable?: boolean;
        availableAggregationFunctions?: string[];
        groupingValueGetter?: import("@mui/x-data-grid-premium").GridGroupingValueGetter<any> | undefined;
        pastedValueParser?: import("@mui/x-data-grid-premium").GridPastedValueParser<any, any, any> | undefined;
        generateData?: (row: any, context: import("..").GridDataGeneratorContext) => any;
        dataGeneratorUniquenessEnabled?: boolean;
        hide?: boolean;
    } | {
        type: "singleSelect";
        valueOptions?: import("@mui/x-data-grid").ValueOptions[] | ((params: import("@mui/x-data-grid").GridValueOptionsParams<any>) => Array<import("@mui/x-data-grid").ValueOptions>) | undefined;
        getOptionLabel?: (value: import("@mui/x-data-grid").ValueOptions) => string;
        getOptionValue?: (value: import("@mui/x-data-grid").ValueOptions) => any;
        field: string;
        headerName?: string;
        description?: string;
        width?: number;
        flex?: number;
        minWidth?: number;
        maxWidth?: number;
        hideable?: boolean;
        sortable?: boolean;
        sortingOrder?: readonly import("@mui/x-data-grid").GridSortDirection[];
        resizable?: boolean;
        editable?: boolean;
        groupable?: boolean;
        pinnable?: boolean;
        sortComparator?: import("@mui/x-data-grid").GridComparatorFn<any> | undefined;
        getSortComparator?: ((sortDirection: import("@mui/x-data-grid").GridSortDirection) => import("@mui/x-data-grid").GridComparatorFn<any> | undefined) | undefined;
        align?: import("@mui/x-data-grid").GridAlignment;
        valueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        rowSpanValueGetter?: import("@mui/x-data-grid").GridValueGetter<any, any, any, never> | undefined;
        valueSetter?: import("@mui/x-data-grid").GridValueSetter<any, any, any> | undefined;
        valueFormatter?: import("@mui/x-data-grid").GridValueFormatter<any, any, any, never> | undefined;
        valueParser?: import("@mui/x-data-grid").GridValueParser<any, any, any> | undefined;
        cellClassName?: import("@mui/x-data-grid").GridCellClassNamePropType<any, any> | undefined;
        display?: "text" | "flex";
        renderCell?: ((params: import("@mui/x-data-grid").GridRenderCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        renderEditCell?: ((params: import("@mui/x-data-grid").GridRenderEditCellParams<any, any, any, import("@mui/x-data-grid").GridTreeNodeWithRender>) => React.ReactNode) | undefined;
        preProcessEditCellProps?: ((params: import("@mui/x-data-grid").GridPreProcessEditCellProps) => import("@mui/x-data-grid").GridEditCellProps | Promise<import("@mui/x-data-grid").GridEditCellProps>) | undefined;
        headerClassName?: import("@mui/x-data-grid").GridColumnHeaderClassNamePropType;
        renderHeader?: ((params: import("@mui/x-data-grid").GridColumnHeaderParams<any, any, any>) => React.ReactNode) | undefined;
        headerAlign?: import("@mui/x-data-grid").GridAlignment;
        hideSortIcons?: boolean;
        disableColumnMenu?: boolean;
        filterable?: boolean;
        filterOperators?: readonly import("@mui/x-data-grid").GridFilterOperator<any, any, any>[] | undefined;
        getApplyQuickFilterFn?: import("@mui/x-data-grid").GetApplyQuickFilterFn<any, any> | undefined;
        disableReorder?: boolean;
        disableExport?: boolean;
        colSpan?: number | import("@mui/x-data-grid").GridColSpanFn<any, any, any> | undefined;
        renderHeaderFilter?: (params: import("@mui/x-data-grid-pro").GridRenderHeaderFilterProps) => React.ReactNode;
        aggregable?: boolean;
        availableAggregationFunctions?: string[];
        groupingValueGetter?: import("@mui/x-data-grid-premium").GridGroupingValueGetter<any> | undefined;
        pastedValueParser?: import("@mui/x-data-grid-premium").GridPastedValueParser<any, any, any> | undefined;
        generateData?: (row: any, context: import("..").GridDataGeneratorContext) => any;
        dataGeneratorUniquenessEnabled?: boolean;
        hide?: boolean;
    })[];
    initialState: {
        columns: {
            columnVisibilityModel: import("@mui/x-data-grid").GridColumnVisibilityModel;
        };
    };
    useQuery: (queryOptions: QueryOptions) => {
        pageInfo: PageInfo;
        rows: GridRowModel[];
        isLoading: boolean;
    };
};
